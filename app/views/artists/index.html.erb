<div class="show-artist-lokal">
  <div class="banner-artist-all">
    <h1>Artists</h1>
    <p>Scroll down to select and view your preferred artist.<p>
  </div>
  <div class="swiper">
    <div class="container-index-artist">
      <% @artists.each_with_index do |artist, index| %>
        <swiper-slide class="slider">
          <div class="artist-card" style="--index: <%= index %>">
            <div class="imgBx">
              <img src=<%= artist.image_url %>>
            </div>
            <div class="content">
              <div class="details">
                <div class="data">
                  <div class="col">
                    <div class="row">
                      <% if @events.present? %>
                        <h3><%= link_to @events.first.name, event_path(@events.first) %><br><span>Upcoming<br>Event</span></h3>
                      <% end %>
                      <div class="row">
                        <h2><%= artist.name %><br><span><%= artist.category %></span> </h2>
                        <h3><%= truncate(artist.biography, length: 100) %><%= link_to "Learn more", artist_path(artist.id) %></p></h3>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </swiper-slide>
      <% end %>
    </div>
  </div>

<script>
function debounce(func, wait) {
  let timeout;
  return function (...args) {
    clearTimeout(timeout);
    timeout = setTimeout(() => func.apply(this, args), wait);
  };
}
 
function initArtistCards() {
  const artistCards = document.querySelectorAll('.artist-card');
  const windowHeight = window.innerHeight;
  let firstCardClicked = false;

  function updateCardState() {
    let activeCardIndex = -1;

    artistCards.forEach((card, index) => {
      const cardRect = card.getBoundingClientRect();

      if (cardRect.top <= windowHeight * 0.6 && cardRect.top >= windowHeight * 0.5) {
        card.classList.add('open');
        card.classList.remove('closed');
        activeCardIndex = index;
      } else {
        card.classList.remove('open');
        card.classList.add('closed');
      }
    });

    if (activeCardIndex > 0) {
      artistCards[activeCardIndex - 1].classList.remove('open');
      artistCards[activeCardIndex - 1].classList.add('closed');
    }
  }

  function onCardClick(event) {
    const card = event.currentTarget;
    scrollToCard(card);
  }

  function scrollToCard(card) {
    const cardRect = card.getBoundingClientRect();
    const scrollToY = cardRect.top + window.scrollY - (windowHeight * 0.6);
    window.scrollTo({ top: scrollToY, behavior: 'smooth' });
    setTimeout(updateCardState, 500);
  }

  artistCards.forEach((card) => {
    card.addEventListener('click', onCardClick);
  });

  window.addEventListener('scroll', debounce(() => {
    if (firstCardClicked) {
      updateCardState();
    }
  }, 50));
}

if (typeof Turbolinks === 'undefined' || Turbolinks === null) {
  document.addEventListener('DOMContentLoaded', initArtistCards);
} else {
  document.addEventListener('turbolinks:load', initArtistCards);
}

</script>


</div>
